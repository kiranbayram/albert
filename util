#!/bin/bash

MY_DIR="$(dirname "$0")"
ROOT_DIR=$(cat "$MY_DIR/root-dir.albert.txt")

check_access_token(){
    if [[ "$ACCESS_TOKEN" == "" && -f "$HOME/.github_token" ]]; then
        ACCESS_TOKEN=$(cat "$HOME/.github_token")
    fi

    if [[ "$ACCESS_TOKEN" == "" ]]; then
        echo "Please set env variable ACCESS_TOKEN to a Github access token or store it in ~/.github_token; go to https://github.com/settings/tokens to create one."
        exit 1;
    fi
}

get_repos(){
    TEAM_ID=$(cat "$MY_DIR/team-id.albert.txt")

    # filter out repos our team is not admin of; otherwise, e.g. security-configuration would appear in the list as of now (2017-12)
    REPO_NAME_FILTER="map(select((.permissions.admin == true) and (.archived == false))) | map(.name) | .[]"

    http GET "https://api.github.com/teams/$TEAM_ID/repos?per_page=100&access_token=$ACCESS_TOKEN" | jq -r "$REPO_NAME_FILTER" | sort
}

# TODO: this is almost same as get_repos
get_archived_repos(){
    TEAM_ID=$(cat "$MY_DIR/team-id.albert.txt")

    REPO_NAME_FILTER="map(select((.permissions.admin == true) and (.archived == true))) | map(.name) | .[]"

    http GET "https://api.github.com/teams/$TEAM_ID/repos?per_page=100&access_token=$ACCESS_TOKEN" | jq -r "$REPO_NAME_FILTER" | sort
}

# TODO: Make this function safer, so that we don't accidentally cause people to lose changes
git_refresh(){
    git stash
    git checkout master
    git pull --rebase
}

git_commit_and_push(){
    COMMIT_MSG="$1"
    DRY_RUN="$2"

    if [[ $DRY_RUN == 0 ]]; then
        git add -A
        git commit -m "$COMMIT_MSG"
        git push
    else
        git stash >> /dev/null
        echo "Would have committed with message '$COMMIT_MSG' and pushed it to master!"
    fi
}

git_create_label(){
    REPO="$1"
    LABEL_NAME="$2"
    LABEL_DESC="$3"
    LABEL_COLOR_CODE="$4"

    JSON=$( jq -n \
                --arg name "$LABEL_NAME" \
                --arg desc "$LABEL_DESC" \
                --arg color "$LABEL_COLOR_CODE" \
                '{name: $name, description: $desc, color: $color}' )
    
    curl -d "$JSON" -X POST "https://api.github.com/repos/Scout24/$REPO/labels?access_token=$ACCESS_TOKEN"
}

git_commit_and_create_pr(){
    COMMIT_MSG="$1"
    REPO="$2"
    DRY_RUN="$3"

    if [[ $DRY_RUN == 0 ]]; then
        git branch -D wip/albert
        git push origin --delete wip/albert
        git checkout -b wip/albert
        git add -A
        git commit -m "$COMMIT_MSG"
        git push --set-upstream origin wip/albert

        JSON=$( jq -n \
                  --arg msg "$COMMIT_MSG" \
                  '{title: $msg, body: $msg, head: "wip/albert", base: "master"}' )
        
        curl -d "$JSON" -X POST "https://api.github.com/repos/Scout24/$REPO/pulls?access_token=$ACCESS_TOKEN"

        git checkout master
    else
        git stash >> /dev/null
        echo "Would have created PR with message '$COMMIT_MSG'!"
    fi
}

aws_login () {
    eval "$(scloud account login -e "$1" "$2")"
}

root_dir_not_found(){
    echo "Root directory not found, exiting." && exit 1
}

merge_pr() {
    PR_NUMBER=$1

    echo -n "Merging PR $PR_NUMBER... "

    RESULT=$(http PUT "https://api.github.com/repos/scout24/$REPO/pulls/$PR_NUMBER/merge?access_token=$ACCESS_TOKEN" merge_method=merge)

    MERGED=$(echo "$RESULT" | jq ".merged")

    if [[ "$MERGED" == "true" ]]; then
        echo -e "$(tput setaf 2)merged$(tput sgr0)\n"
    else
        MESSAGE=$(echo "$RESULT" | jq ".message")
        echo -e "$(tput setaf 1)failed: $MESSAGE$(tput sgr0)\n"
    fi

}

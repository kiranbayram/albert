#!/bin/bash

MY_DIR="$(dirname "$0")"
source "$MY_DIR/util"

check_access_token

FILE="build.sbt"
OLD_VERSION="$1"
NEW_VERSION="$2"
COMMIT_MSG="$3"

replace_text(){
    SEPARATOR="~"

    # Use another separator if input strings contain default separator
    if [[ "$OLD_VERSION$NEW_VERSION" = *"$SEPARATOR"* ]]; then
        echo "It's there!"
        SEPARATOR="%"
    fi

	gsed -i "s$SEPARATOR$OLD_VERSION$SEPARATOR$NEW_VERSION$SEPARATOR" $FILE
}

REPO_NAMES=$(get_repos)

for REPO in $REPO_NAMES; do
	echo "$(tput bold)=====$REPO=====$(tput sgr0)"
	cd ~/git/$REPO
	if [ $? -ne 0 ]; then
		git clone git@github.com:Scout24/$REPO.git
		cd $REPO
	fi

	if [ -f "$FILE" ]; then

        grep -q "$SEARCH_TEXT" "$FILE"
        if [ $? -eq 0 ]; then
			git stash
			git checkout master
			git pull

			replace_text

            if [[ "$DO_SBT_TEST" ]]; then
                if [ -f sbt ]; then
                    ./sbt test
                else
                    sbt test
                fi
            fi

			git diff

			read -p "Should i commit and push changes? [y/n] " -n 1 -r
			echo

			if [[ $REPLY =~ ^[Yy]$ ]]; then
                git add -A
				git commit -m "$COMMIT_MSG"
				git push
			else
				git stash
                read -p "Should i open the original file with vim? [y/n] " -n 1 -r
			    echo

                if [[ $REPLY =~ ^[Yy]$ ]]; then
                    vim $FILE
                    git diff

                    read -p "Should i commit and push changes? [y/n]" -n 1 -r
			        echo

                    if [[ $REPLY =~ ^[Yy]$ ]]
                    then
                        git add -A
                        git commit -m "$COMMIT_MSG"
                        git push
                    else
                        git stash
                    fi
                else
                    git stash
                fi
			fi
        fi
	fi

	cd ~/git

    continue
done;


